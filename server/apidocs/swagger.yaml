swagger: "2.0"
info:
  description: "Expressapp api documentation"
  version: "1.0.0"
  title: "Expressapp"
  # termsOfService: "http://swagger.io/terms/"
  contact:
    email: "contactjittu@gmail.com"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: ""
basePath: "/api"
schemes:
- "http"
- "https"
securityDefinitions:
  Bearer:
    description: For accessing the API a valid token must be passed in all the queries
    type: apiKey
    name: Authorization
    in: header
paths:
  /user/signup:
    post:
      tags:
      - "User"
      summary: "Signup"
      description: "Create account"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "firstName, lastName, email, profileImage, and password in body"
        required: true
        schema:
          $ref: "#/definitions/signupSchema"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
  /user/signin:
    post:
      tags:
      - "User"
      summary: "Signin using email and password"
      description: "Signin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Send email and password in body"
        required: true
        schema:
          $ref: "#/definitions/signinSchema"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
  /user:
    put:
      tags:
      - "User"
      summary: "Update user data"
      description: "Update user data"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "firstName, lastName, email, profileImage in body"
        required: true
        schema:
          $ref: "#/definitions/editUserSchema"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
      security:
        - Bearer: []
    get:
      tags:
      - "User"
      summary: "Get user by userId"
      description: "Get user by userId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "userId in query"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
    delete:
      tags:
      - "User"
      summary: "Delete user by userId"
      description: "Delete user by userId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "userId in query"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
  /user/{userId}:
    get:
      tags:
      - "User"
      summary: "Get user by userId"
      description: "Get user by userId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "userId in path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
    delete:
      tags:
      - "User"
      summary: "Delete user by userId"
      description: "Delete user by userId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "userId in path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
  /users/search:
    get:
      tags:
      - "User"
      summary: "Search users"
      description: "Search users by their firstName and lastName using text"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "text"
        in: "query"
        description: "text in query"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
  /users:
    get:
      tags:
      - "User"
      summary: "Get users"
      description: "Get users with pagination"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "itemsperpage"
        in: "query"
        description: "itemsperpage in query"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "page in query"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Internal Server Error"
definitions:
  signupSchema:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    - "email"
    - "password"
    - "profileImage"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      profileImage:
        type: "string"
        format: "byte"
  signinSchema:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  editUserSchema:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    - "email"
    - "profileImage"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      profileImage:
        type: "string"                    